{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","newsUrlComponent","React","createContext","TopNavList","className","CalendarDisplay","value","useContext","onChange","date","current","Date","latestdate","setDate","getDate","console","log","Math","round","getTime","alert","newsDate","NewsBoard","NewsList","newssources","props","useState","data","setData","newsdate","getFullYear","getMonth","urlSelectDate","a","fetch","response","json","news","articles","useEffect","getNews","publishedAt","newsComponents","map","article","index","Product","key","id","title","description","url","source","name","newsImageUrl","urlToImage","publishTime","author","content","src","href","App","country","setCountry","setSource","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dab25d32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useContext,useState, useEffect} from 'react';\nimport DatePicker from 'react-date-picker';\nimport logo from './logo.svg';\nimport './App.css';\nconst newsUrlComponent = React.createContext({});\n\nfunction App() {\n\n  const [newsDate,setDate] = useState(new Date());\n  const [country,setCountry] = useState('us');\n  const [source,setSource] = useState('associated-press');\n\n  return (\n    <div className=\"App\">\n      <newsUrlComponent.Provider value={{newsDate,setDate,country,setCountry,source,setSource}}>\n        <TopNavList />\n        <NewsBoard />\n      </newsUrlComponent.Provider>\n    </div>\n  );\n}\n\nfunction TopNavList() {\n  return(\n    <div className=\"ui secondary pointing menu\">\n      <CalendarDisplay />\n    </div>\n  );\n}\n\nfunction CalendarDisplay(){\n  const value= useContext(newsUrlComponent);\n  return (\n    <div className='item'>\n      <DatePicker\n        onChange = {date=>{\n          var current=new Date();\n          var latestdate = new Date();\n          latestdate.setDate(latestdate.getDate()-30);\n          console.log(latestdate);\n          if(Math.round((current. getTime()  - date. getTime())/1000/60/60/24)<31)\n            value.setDate(date);\n          else\n            alert('You are trying to request results too far in the past. Your can request news articles as far back as '+latestdate)\n        }}\n        value = {value.newsDate}\n      />\n    </div>\n  );\n}\n\nfunction NewsBoard(){\n  const centerNews='associated-press,reuters,bloomberg,bbc-news,the-hill,usa-today,the-wall-street-journal&';\n  const leftNews = 'abc-news,buzzfeed,cbs-news,cnn,nbc-news,politico,time,the-washington-post,the-huffington-post,msnbc&';\n  const rightNews = 'fox-news,the-washington-times,breitbart-news,national-review,the-american-conservative&';\n  return(\n    <div className = \"ui equal width divided grid\">\n      <div className='column leftNews'>\n        <NewsList newssources = {leftNews} />\n      </div>      \n      <div className='column centernews'>\n        <NewsList newssources = {centerNews} />\n      </div>  \n      <div className='column rightNews'>\n        <NewsList newssources = {rightNews} />\n      </div>  \n\n    </div>\n  );\n}\nfunction NewsList(props){\n  const [data, setData] = useState([]);\n  const value= useContext(newsUrlComponent);\n\n  const newsdate = value.newsDate.getFullYear()+'-'+(value.newsDate.getMonth()+1)+'-'+value.newsDate.getDate();\n\n\tconst urlSelectDate = 'https://newsapi.org/v2/everything?' +\n          'qInTitle=Coronavirus%20OR%20Covid-19%20OR%20pandemic&' +\n          'sources='+props.newssources+\n          'from='+newsdate+'&'+\n          'to='+newsdate+'&'+\n          'sortBy=popularity&' +\n          'pageSize=30&'+\n          'apiKey=832f76f6261645f78b4cfb6490835a6c';\n  const today= new Date();\n\n  async function getNews(){\n    \tconst response = await fetch(urlSelectDate);\n    \tconst news = await response.json();\n    \tsetData(news.articles);\n  }\n\n  useEffect(()=>{getNews()},[urlSelectDate]);\n  console.log(data.publishedAt);\n  const newsComponents = data.map((article,index) => (\n\t\t\t<Product \n\t\t\t\tkey = {'article' + index}\n\t\t\t\tid = {index}\n\t\t\t\ttitle = {article.title}\n\t\t\t\tdescription = {article.description}\n        url = {article.url}\n        source = {article.source.name}\n        newsImageUrl = {article.urlToImage}\n        publishTime = {article.publishedAt}\n        author = {article.author}\n        content = {article.content}\n\t\t\t/>\n      )); \n  return(\n\t\t\t\t<div className = 'ui unstackable items' >\n\t\t\t\t\t{newsComponents}\n\t\t\t\t</div>\n\t);\n}\n\nfunction Product (props){\n\t\treturn(\n\t\t\t<div className='item newscomponent'>\n\t\t\t\t<div className='image'>\n\t\t\t\t\t<img src={props.newsImageUrl} />\n          <span className='header'>{props.source}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='middle aligned content'>\n\t\t\t\t\t<div className = 'header'>\n            <a href = {props.url}>\n              {props.title}\t\t\t\t\t\n           \t</a>\n\n          </div>\n\t\t\t\t\t<div className = 'description'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{props.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n          <div className='extra'>\n          <span>{props.publishTime}</span>\n          </div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n}\n\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"main ui fluid container\">\n      <h1 className=\"ui centered header\">Covid-19 News</h1>\n        <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}