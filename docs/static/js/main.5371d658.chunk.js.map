{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","newsUrlComponent","React","createContext","_","require","CalendarDisplay","value","useContext","current","Date","latestdate","setDate","getDate","className","minDate","maxDate","onChange","date","newsDate","NewsBoard","useState","leftNewsList","centerNewsList","rightNewsList","setData","newsdate","getFullYear","getMonth","createUrl","urlsource","keyword","leftListUrl","rightListUrl","centerListUrl","a","fetch","responseLeft","json","newsLeft","responseRight","newsRight","responseCenter","newsCenter","articles","throttled","useRef","debounce","useEffect","panes","menuItem","content","color","render","Tab","Pane","NewsList","newssources","isMobiledevice","useMediaQuery","query","isDesktopOrLaptop","data","newsComponents","map","article","index","Product","key","id","title","description","url","source","name","newsImageUrl","urlToImage","publishTime","publishedAt","author","props","src","href","App","ReactGA","initialize","pageview","window","location","pathname","search","country","setCountry","setSource","setKeyword","Provider","type","placeholder","userInput","target","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5371d658.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {useRef,useContext,useState, useEffect} from 'react';\r\nimport DatePicker from 'react-date-picker';\r\nimport {useMediaQuery} from 'react-responsive';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport ReactGA from 'react-ga';\r\nconst newsUrlComponent = React.createContext({});\r\nconst _ = require('lodash');\r\n\r\nfunction App() {\r\n  ReactGA.initialize('UA-165908026-1');\r\n  const PageView = () => {  \r\n    ReactGA.pageview(window.location.pathname +  \r\n                     window.location.search); \r\n  }\r\n  const countpageview=PageView();\r\n  \r\n\r\n  const [newsDate,setDate] = useState(new Date());\r\n  const [country,setCountry] = useState('us');\r\n  const [source,setSource] = useState('associated-press');\r\n  const [keyword, setKeyword]= useState('Coronavirus OR Covid-19 pandemic');\r\n  return (\r\n    <div className=\"App\">\r\n      <newsUrlComponent.Provider value={{newsDate,setDate,country,setCountry,source,setSource,keyword, setKeyword}}>\r\n        <CalendarDisplay />\r\n        <input type='text' placeholder='Search News...' value={keyword} onChange = {userInput=>{setKeyword(userInput.target.value)}}></input>\r\n        <NewsBoard />\r\n      </newsUrlComponent.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CalendarDisplay(){\r\n  const value= useContext(newsUrlComponent);\r\n  var current=new Date();\r\n  var latestdate = new Date();\r\n  latestdate.setDate(latestdate.getDate()-30);\r\n  return (\r\n    <div className='item calendar'>\r\n      <DatePicker\r\n        minDate = {latestdate}\r\n        maxDate = {current}\r\n        onChange = {date=>{          \r\n            value.setDate(date);\r\n        }}\r\n        value = {value.newsDate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NewsBoard(){\r\n  const centerNews='associated-press,reuters,bloomberg,bbc-news,the-hill,usa-today,the-wall-street-journal,';\r\n  const leftNews = 'abc-news,buzzfeed,cbs-news,cnn,nbc-news,politico,time,the-washington-post,the-huffington-post,msnbc,';\r\n  const rightNews = 'fox-news,the-washington-times,breitbart-news,national-review,the-american-conservative';\r\n  const [[leftNewsList, centerNewsList,rightNewsList],setData] = useState([[],[],[]]);\r\n  const value= useContext(newsUrlComponent);\r\n  const newsdate = value.newsDate.getFullYear()+'-'+(value.newsDate.getMonth()+1)+'-'+value.newsDate.getDate();\r\n  const createUrl=(urlsource,newsdate,value)=>{\r\n    const url= 'https://newsapi.org/v2/everything?' +\r\n                        'q='+value.keyword+'&' +\r\n                        'sources='+urlsource+'&'+\r\n                        'from='+newsdate+'&'+\r\n                        'to='+newsdate+'&'+\r\n                        'sortBy=popularity&' +\r\n                        'pageSize=30&'+\r\n                        'sortBy=popularity&'+\r\n                        'apiKey=832f76f6261645f78b4cfb6490835a6c';\r\n   return url;\r\n}\r\nconst leftListUrl=createUrl(leftNews,newsdate,value);\r\nconst rightListUrl=createUrl(rightNews,newsdate,value);\r\nconst centerListUrl=createUrl(centerNews,newsdate,value);\r\n\r\n  async function getNews(leftListUrl,rightListUrl,centerListUrl){\r\n    const responseLeft = await fetch(leftListUrl);\r\n    const newsLeft = await responseLeft.json();\r\n    const responseRight = await fetch(rightListUrl);\r\n    const newsRight = await responseRight.json();\r\n    const responseCenter = await fetch(centerListUrl);\r\n    const newsCenter = await responseCenter.json();\r\n    setData([newsLeft.articles,newsCenter.articles,newsRight.articles]);\r\n  }\r\n  \r\n  const throttled =useRef(_.debounce(getNews,1000));\r\n  useEffect(()=>{\r\n    throttled.current(leftListUrl,rightListUrl,centerListUrl)\r\n  },[leftListUrl,rightListUrl,centerListUrl]);\r\n\r\n\r\n    \r\n   const panes = [\r\n    {menuItem:{content:'Blue',color:'blue'}, render:()=> <Tab.Pane>\r\n      <div className='column leftNews'>\r\n        <NewsList newssources = {leftNewsList} />\r\n      </div>  \r\n    </Tab.Pane>},\r\n    {menuItem:{content:'Grey',color:'grey'}, render:()=> <Tab.Pane>\r\n      <div className='column centernews'>\r\n        <NewsList newssources = {centerNewsList} />\r\n      </div>\r\n    </Tab.Pane>},\r\n    {menuItem:{content:'Red',color:'red'}, render:()=> <Tab.Pane>\r\n      <div className='column rightNews'>\r\n        <NewsList newssources = {rightNewsList} />\r\n      </div>\r\n    </Tab.Pane>}\r\n  ];\r\n  const isMobiledevice = useMediaQuery({query: '(max-width: 1224px)'});\r\n  const isDesktopOrLaptop  = useMediaQuery({ query: '(min-width: 1224px)' }) \r\n  return(\r\n    <div className = \"ui equal width divided unstackable grid\">\r\n     {isMobiledevice && <Tab panes={panes}/> }\r\n     {isDesktopOrLaptop && <>\r\n        <div className='column leftNews'>\r\n          <NewsList newssources = {leftNewsList} />\r\n        </div>\r\n        <div className='column centernews'>\r\n          <NewsList newssources = {centerNewsList} />\r\n        </div>\r\n        <div className='column rightNews'>\r\n          <NewsList newssources = {rightNewsList} />\r\n        </div>\r\n        </>}\r\n    </div>\r\n  );\r\n}\r\nfunction NewsList(data){\r\n   const newsComponents = data.newssources.map((article,index) => (\r\n\t\t\t<Product \r\n\t\t\t\tkey = {'article' + index}\r\n\t\t\t\tid = {index}\r\n\t\t\t\ttitle = {article.title}\r\n\t\t\t\tdescription = {article.description}\r\n        url = {article.url}\r\n        source = {article.source.name}\r\n        newsImageUrl = {article.urlToImage}\r\n        publishTime = {article.publishedAt}\r\n        author = {article.author}\r\n        content = {article.content}\r\n\t\t\t/>\r\n      )); \r\n  return(\r\n\t\t\t\t<div className = 'ui stackable items' >\r\n\t\t\t\t\t{newsComponents}\r\n\t\t\t\t</div>\r\n\t); \r\n}\r\n\r\nfunction Product (props){\r\n\t\treturn(\r\n\t\t\t<div className='item newscomponent'>\r\n\t\t\t\t<div className='image'>\r\n\t\t\t\t\t<img src={props.newsImageUrl} />\r\n          <span className='header'>{props.source}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='middle aligned content'>\r\n\t\t\t\t\t<div className = 'header'>\r\n            <a href = {props.url}>\r\n              {props.title}\t\t\t\t\t\r\n           \t</a>\r\n\r\n          </div>\r\n\t\t\t\t\t<div className = 'description'>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{props.description}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n          <div className='extra'>\r\n          <span>{props.publishTime}</span>\r\n          </div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"main ui fluid container\">\r\n      <h1 className=\"ui centered header\">News</h1>\r\n        <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}