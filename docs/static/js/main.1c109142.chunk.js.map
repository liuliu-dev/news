{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","newsUrlComponent","React","createContext","TopNavList","className","CalendarDisplay","value","useContext","onChange","date","current","Date","latestdate","setDate","getDate","console","log","Math","round","getTime","alert","newsDate","NewsBoard","NewsList","newssources","props","useState","data","setData","newsdate","getFullYear","getMonth","urlSelectDate","a","fetch","response","json","news","articles","useEffect","getNews","publishedAt","newsComponents","map","article","index","Product","key","id","title","description","url","source","name","newsImageUrl","urlToImage","publishTime","author","content","src","href","App","country","setCountry","setSource","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c109142.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {useContext,useState, useEffect} from 'react';\r\nimport DatePicker from 'react-date-picker';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nconst newsUrlComponent = React.createContext({});\r\n\r\nfunction App() {\r\n\r\n  const [newsDate,setDate] = useState(new Date());\r\n  const [country,setCountry] = useState('us');\r\n  const [source,setSource] = useState('associated-press');\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <newsUrlComponent.Provider value={{newsDate,setDate,country,setCountry,source,setSource}}>\r\n        <TopNavList />\r\n        <NewsBoard />\r\n      </newsUrlComponent.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TopNavList() {\r\n  return(\r\n    <div className=\"ui secondary pointing menu\">\r\n      <CalendarDisplay />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CalendarDisplay(){\r\n  const value= useContext(newsUrlComponent);\r\n  return (\r\n    <div className='item'>\r\n      <DatePicker\r\n        onChange = {date=>{\r\n          var current=new Date();\r\n          var latestdate = new Date();\r\n          latestdate.setDate(latestdate.getDate()-30);\r\n          console.log(latestdate);\r\n          if(Math.round((current. getTime()  - date. getTime())/1000/60/60/24)<31)\r\n            value.setDate(date);\r\n          else\r\n            alert('You are trying to request results too far in the past. Your can request news articles as far back as '+latestdate)\r\n        }}\r\n        value = {value.newsDate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NewsBoard(){\r\n  const centerNews='associated-press,reuters,bloomberg,bbc-news,the-hill,usa-today,the-wall-street-journal&';\r\n  const leftNews = 'abc-news,buzzfeed,cbs-news,cnn,nbc-news,politico,time,the-washington-post,the-huffington-post,msnbc&';\r\n  const rightNews = 'fox-news,the-washington-times,breitbart-news,national-review,the-american-conservative&';\r\n  return(\r\n    <div className = \"ui equal width divided stackable grid\">\r\n      <div className='column leftNews'>\r\n        <NewsList newssources = {leftNews} />\r\n      </div>      \r\n      <div className='column centernews'>\r\n        <NewsList newssources = {centerNews} />\r\n      </div>  \r\n      <div className='column rightNews'>\r\n        <NewsList newssources = {rightNews} />\r\n      </div>  \r\n\r\n    </div>\r\n  );\r\n}\r\nfunction NewsList(props){\r\n  const [data, setData] = useState([]);\r\n  const value= useContext(newsUrlComponent);\r\n\r\n  const newsdate = value.newsDate.getFullYear()+'-'+(value.newsDate.getMonth()+1)+'-'+value.newsDate.getDate();\r\n\r\n\tconst urlSelectDate = 'https://newsapi.org/v2/everything?' +\r\n          'qInTitle=Coronavirus%20OR%20Covid-19%20OR%20pandemic&' +\r\n          'sources='+props.newssources+\r\n          'from='+newsdate+'&'+\r\n          'to='+newsdate+'&'+\r\n          'sortBy=popularity&' +\r\n          'pageSize=30&'+\r\n          'apiKey=832f76f6261645f78b4cfb6490835a6c';\r\n  const today= new Date();\r\n\r\n  async function getNews(){\r\n    \tconst response = await fetch(urlSelectDate);\r\n    \tconst news = await response.json();\r\n    \tsetData(news.articles);\r\n  }\r\n\r\n  useEffect(()=>{getNews()},[urlSelectDate]);\r\n  console.log(data.publishedAt);\r\n  const newsComponents = data.map((article,index) => (\r\n\t\t\t<Product \r\n\t\t\t\tkey = {'article' + index}\r\n\t\t\t\tid = {index}\r\n\t\t\t\ttitle = {article.title}\r\n\t\t\t\tdescription = {article.description}\r\n        url = {article.url}\r\n        source = {article.source.name}\r\n        newsImageUrl = {article.urlToImage}\r\n        publishTime = {article.publishedAt}\r\n        author = {article.author}\r\n        content = {article.content}\r\n\t\t\t/>\r\n      )); \r\n  return(\r\n\t\t\t\t<div className = 'ui stackable items' >\r\n\t\t\t\t\t{newsComponents}\r\n\t\t\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction Product (props){\r\n\t\treturn(\r\n\t\t\t<div className='item newscomponent'>\r\n\t\t\t\t<div className='image'>\r\n\t\t\t\t\t<img src={props.newsImageUrl} />\r\n          <span className='header'>{props.source}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='middle aligned content'>\r\n\t\t\t\t\t<div className = 'header'>\r\n            <a href = {props.url}>\r\n              {props.title}\t\t\t\t\t\r\n           \t</a>\r\n\r\n          </div>\r\n\t\t\t\t\t<div className = 'description'>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{props.description}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n          <div className='extra'>\r\n          <span>{props.publishTime}</span>\r\n          </div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"main ui fluid container\">\r\n      <h1 className=\"ui centered header\">Covid-19 News</h1>\r\n        <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}